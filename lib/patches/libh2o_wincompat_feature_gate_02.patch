diff --git a/h2o/deps/hiredis/hiredis.h b/h2o/deps/hiredis/hiredis.h
index 77d5797..abe1e85 100644
--- a/h2o/deps/hiredis/hiredis.h
+++ b/h2o/deps/hiredis/hiredis.h
@@ -33,6 +33,7 @@
 
 #ifndef __HIREDIS_H
 #define __HIREDIS_H
+#include "user_config.h"
 #include "read.h"
 #include <stdarg.h> /* for va_list */
 #include <sys/time.h> /* for struct timeval */
diff --git a/h2o/deps/picotls/deps/cifra/src/bitops.h b/h2o/deps/picotls/deps/cifra/src/bitops.h
index a1c1e7d..43a9aa0 100644
--- a/h2o/deps/picotls/deps/cifra/src/bitops.h
+++ b/h2o/deps/picotls/deps/cifra/src/bitops.h
@@ -299,7 +299,7 @@ static inline void copy_bytes_unaligned(uint8_t *out, const uint8_t *in, size_t
 static inline uint32_t count_trailing_zeroes(uint32_t x)
 {
 #ifdef _WINDOWS
-  uint32_t r = 0;
+  unsigned long r = 0;
   _BitScanReverse(&r, x);
   return (31 - r);
 #else
diff --git a/h2o/include/h2o.h b/h2o/include/h2o.h
index 152017a..ef5c8a9 100644
--- a/h2o/include/h2o.h
+++ b/h2o/include/h2o.h
@@ -26,6 +26,7 @@
 extern "C" {
 #endif
 
+#include "user_config.h"
 #include <assert.h>
 #include <stddef.h>
 #include <stdint.h>
diff --git a/h2o/include/h2o/memory.h b/h2o/include/h2o/memory.h
index 54fe19b..909426a 100644
--- a/h2o/include/h2o/memory.h
+++ b/h2o/include/h2o/memory.h
@@ -22,6 +22,7 @@
 #ifndef h2o__memory_h
 #define h2o__memory_h
 
+#include "user_config.h"
 #ifdef __sun__
 #include <alloca.h>
 #endif
diff --git a/h2o/include/h2o/socket.h b/h2o/include/h2o/socket.h
index 983ad37..47d3a3e 100644
--- a/h2o/include/h2o/socket.h
+++ b/h2o/include/h2o/socket.h
@@ -26,6 +26,8 @@
 extern "C" {
 #endif
 
+#include "user_config.h"
+
 #include <stdint.h>
 #include <sys/socket.h>
 #include <openssl/ssl.h>
diff --git a/h2o/lib/common/memory.c b/h2o/lib/common/memory.c
index b25462a..5007116 100644
--- a/h2o/lib/common/memory.c
+++ b/h2o/lib/common/memory.c
@@ -427,6 +427,7 @@ h2o_iovec_t h2o_buffer_try_reserve(h2o_buffer_t **_inbuf, size_t min_guarantee)
                     h2o_perror("failed to resize temporary file");
                     goto MapError;
                 }
+
                 if ((newp = (void *)mmap(NULL, new_allocsize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0)) == MAP_FAILED) {
                     h2o_perror("mmap failed");
                     goto MapError;
diff --git a/h2o/lib/common/socket.c b/h2o/lib/common/socket.c
index 2086b13..8a3279a 100644
--- a/h2o/lib/common/socket.c
+++ b/h2o/lib/common/socket.c
@@ -1730,7 +1730,7 @@ int h2o_socket_set_df_bit(int fd, int domain)
 {
 #define SETSOCKOPT(ip, optname, _optvar)                                                                                           \
     do {                                                                                                                           \
-        int optvar = _optvar;                                                                                                      \
+        setsockopt_name_t optvar = _optvar;                                                                                                      \
         if (setsockopt(fd, ip, optname, &optvar, sizeof(optvar)) != 0) {                                                           \
             perror("failed to set the DF bit through setsockopt(" H2O_TO_STR(ip) ", " H2O_TO_STR(optname) ")");                    \
             return 0;                                                                                                              \
diff --git a/h2o/lib/core/config.c b/h2o/lib/core/config.c
index 8cc789e..89f041b 100644
--- a/h2o/lib/core/config.c
+++ b/h2o/lib/core/config.c
@@ -198,11 +198,13 @@ void h2o_config_init(h2o_globalconf_t *config)
     config->http2.latency_optimization.max_additional_delay = 10;
     config->http2.latency_optimization.max_cwnd = 65535;
     config->http2.callbacks = H2O_HTTP2_CALLBACKS;
+    #ifdef ENABLE_HTTP3
     config->http3.idle_timeout = quicly_spec_context.transport_params.max_idle_timeout;
     config->http3.active_stream_window_size = H2O_DEFAULT_HTTP3_ACTIVE_STREAM_WINDOW_SIZE;
     config->http3.allow_delayed_ack = 1;
     config->http3.use_gso = 1;
     config->http3.callbacks = H2O_HTTP3_SERVER_CALLBACKS;
+    #endif
     config->send_informational_mode = H2O_SEND_INFORMATIONAL_MODE_EXCEPT_H1;
     config->mimemap = h2o_mimemap_create();
     h2o_socketpool_init_global(&config->proxy.global_socketpool, SIZE_MAX);
diff --git a/h2o/lib/core/context.c b/h2o/lib/core/context.c
index 501bd03..370e6ab 100644
--- a/h2o/lib/core/context.c
+++ b/h2o/lib/core/context.c
@@ -186,7 +186,11 @@ void h2o_context_update_timestamp_string_cache(h2o_context_t *ctx)
     if (ctx->_timestamp_cache.value != NULL)
         h2o_mem_release_shared(ctx->_timestamp_cache.value);
     ctx->_timestamp_cache.value = h2o_mem_alloc_shared(NULL, sizeof(h2o_timestamp_string_t), NULL);
+#ifdef _WIN64
+    gmt = *_gmtime32(&ctx->_timestamp_cache.tv_at.tv_sec);
+#else
     gmtime_r(&ctx->_timestamp_cache.tv_at.tv_sec, &gmt);
+#endif
     h2o_time2str_rfc1123(ctx->_timestamp_cache.value->rfc1123, &gmt);
     h2o_time2str_log(ctx->_timestamp_cache.value->log, ctx->_timestamp_cache.tv_at.tv_sec);
 }
diff --git a/h2o/lib/core/request.c b/h2o/lib/core/request.c
index 9d0d09f..3e61d2f 100644
--- a/h2o/lib/core/request.c
+++ b/h2o/lib/core/request.c
@@ -394,7 +394,9 @@ static void process_resolved_request(h2o_req_t *req, h2o_hostconf_t **hosts)
     }
 
     /* uses the current pathconf, in other words, proxy uses the previous pathconf for building filters */
+#ifdef ENABLE_PROXY
     h2o__proxy_process_request(req);
+#endif
 }
 
 void h2o_reprocess_request(h2o_req_t *req, h2o_iovec_t method, const h2o_url_scheme_t *scheme, h2o_iovec_t authority,
diff --git a/h2o/lib/core/util.c b/h2o/lib/core/util.c
index 9ef1dcd..3bdef0f 100644
--- a/h2o/lib/core/util.c
+++ b/h2o/lib/core/util.c
@@ -84,6 +84,8 @@ static struct st_h2o_accept_data_t *create_default_accept_data(h2o_accept_ctx_t
     return data;
 }
 
+#ifdef ENABLE_REDIS
+
 static struct st_h2o_accept_data_t *create_redis_accept_data(h2o_accept_ctx_t *ctx, h2o_socket_t *sock, struct timeval connected_at)
 {
     struct st_h2o_redis_resumption_accept_data_t *data = (struct st_h2o_redis_resumption_accept_data_t *)create_accept_data(
@@ -92,6 +94,10 @@ static struct st_h2o_accept_data_t *create_redis_accept_data(h2o_accept_ctx_t *c
     return &data->super;
 }
 
+#endif
+
+#ifdef ENABLE_MEMCACHED
+
 static struct st_h2o_accept_data_t *create_memcached_accept_data(h2o_accept_ctx_t *ctx, h2o_socket_t *sock,
                                                                  struct timeval connected_at)
 {
@@ -101,6 +107,8 @@ static struct st_h2o_accept_data_t *create_memcached_accept_data(h2o_accept_ctx_
     return &data->super;
 }
 
+#endif
+
 static void destroy_accept_data(struct st_h2o_accept_data_t *data)
 {
     h2o_timer_unlink(&data->timeout);
@@ -135,6 +143,8 @@ static struct {
     destroy_default_accept_data,
 };
 
+#ifdef ENABLED_MEMCACHED
+
 static void memcached_resumption_on_get(h2o_iovec_t session_data, void *_accept_data)
 {
     struct st_h2o_memcached_resumption_accept_data_t *accept_data = _accept_data;
@@ -166,6 +176,10 @@ void h2o_accept_setup_memcached_ssl_resumption(h2o_memcached_context_t *memc, un
     accept_data_callbacks.destroy = destroy_memcached_accept_data;
 }
 
+#endif
+
+#ifdef ENABLE_REDIS
+
 static void on_redis_connect(void)
 {
     h2o_error_printf("connected to redis at %s:%" PRIu16 "\n", async_resumption_context.redis.host.base,
@@ -199,6 +213,8 @@ static h2o_redis_client_t *get_redis_client(h2o_context_t *ctx)
     return *client;
 }
 
+#endif
+
 #define BASE64_LENGTH(len) (((len) + 2) / 3 * 4 + 1)
 
 static h2o_iovec_t build_redis_key(h2o_iovec_t session_id, h2o_iovec_t prefix)
@@ -241,6 +257,8 @@ static void redis_resumption_on_get(redisReply *reply, void *_accept_data, const
         free(session_data.base);
 }
 
+#ifdef ENABLE_REDIS
+
 static void on_redis_resumption_get_failed(h2o_timer_t *timeout_entry)
 {
     struct st_h2o_redis_resumption_accept_data_t *accept_data =
@@ -301,6 +319,8 @@ void h2o_accept_setup_redis_ssl_resumption(const char *host, uint16_t port, unsi
     accept_data_callbacks.destroy = destroy_redis_accept_data;
 }
 
+#endif
+
 static void accept_timeout(struct st_h2o_accept_data_t *data)
 {
     /* TODO log */
@@ -326,6 +346,8 @@ static void on_redis_accept_timeout(h2o_timer_t *entry)
     accept_timeout(&data->super);
 }
 
+#ifdef ENABLE_MEMCACHED
+
 static void on_memcached_accept_timeout(h2o_timer_t *entry)
 {
     struct st_h2o_memcached_resumption_accept_data_t *data =
@@ -337,6 +359,8 @@ static void on_memcached_accept_timeout(h2o_timer_t *entry)
     accept_timeout(&data->super);
 }
 
+#endif
+
 static void on_ssl_handshake_complete(h2o_socket_t *sock, const char *err)
 {
     struct st_h2o_accept_data_t *data = sock->data;
@@ -939,8 +963,13 @@ const char h2o_npn_protocols[] = NPN_PROTOCOLS_CORE "\x08"
 
 uint64_t h2o_connection_id = 0;
 
+// Unused
+/*
+
 void h2o_cleanup_thread(void)
 {
     h2o_mem_clear_recycle(&h2o_mem_pool_allocator, 1);
     h2o_buffer_clear_recycle(1);
 }
+
+*/
