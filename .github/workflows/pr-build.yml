name: PR Build

on: 
  workflow_dispatch:
    inputs:
      deps_rev_override:
        description: 'Deps Revision Override'
        type: string
        default: ''
        required: false
  pull_request:
concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true
jobs:  
  build:
    name: PR Build host=${{ matrix.config.host }} target=${{ matrix.config.target }} mode=${{ matrix.config.mode }}
    runs-on: ${{ matrix.config.host }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - host: ubuntu-22.04
            target: x86_64-linux-gnu
            mode: release
          - host: macos-12
            target: x86_64-macos-none
            mode: release
          - host: macos-12
            target: aarch64-macos-none
            mode: release
          - host: windows-2022
            target: x86_64-windows-gnu
            mode: release
          # - host: windows-2019
          #  target: x86_64-windows-msvc
          #  mode: release
    env:
      ZIG_TARGET_FLAG: >-
        ${{ fromJson('{
          "x86_64-windows-gnu": "-Dtarget=x86_64-windows-gnu -Dcpu=baseline",
          "x86_64-linux-gnu": "-Dtarget=x86_64-linux-gnu -Dcpu=baseline",
          "x86_64-macos-none": "-Dtarget=x86_64-macos.12-none -Dcpu=baseline",
          "aarch64-macos-none": "-Dtarget=aarch64-macos.12-none -Dcpu=baseline",
        }')[matrix.config.target] }}
      BUILD_HOST: ${{ matrix.config.host }}
      BUILD_TARGET: ${{ matrix.config.target }}
      BUILD_MODE: ${{ matrix.config.mode }}
      BIN_EXT: ${{ contains(matrix.config.target, 'windows') && '.exe' || '' }}
      ZIG_MODE_FLAG: ${{ (matrix.config.mode == 'release' && '-Doptimize=ReleaseSafe') || '' }}
      ZIG_VERSION: 0.11.0-dev.1797+d3c9bfada
    steps:
      - name: Install Linux deps.
        if: env.BUILD_HOST == 'ubuntu-22.04' && env.BUILD_TARGET == 'x86_64-linux-gnu'
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt-get install libx11-dev libxcursor-dev libxi-dev libxrandr-dev libxinerama-dev libxxf86vm-dev libxss-dev libgl1-mesa-dev libvulkan-dev

      - name: Clone repo.
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          #submodules: recursive

      - name: Install zig.
        if: env.BUILD_HOST == 'ubuntu-22.04'
        run: |
          wget -c https://ziglang.org/builds/zig-linux-x86_64-${{ env.ZIG_VERSION }}.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin

      - name: Install zig.
        if: env.BUILD_HOST == 'macos-12'
        run: |
          wget -c https://ziglang.org/builds/zig-macos-x86_64-${{ env.ZIG_VERSION }}.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin
          xcode-select --print-path
          
      - name: Install zig.
        if: env.BUILD_HOST == 'windows-2022'
        run: |
          wget -c https://ziglang.org/builds/zig-windows-x86_64-0.11.0-dev.1465+d64dd75e3.zip -O - | tar -J --strip-components=1 -C /usr/local/bin

      - name: Cache.
        # Don't cache for windows, since there are issues with subsequent builds. Check to re-enable this later.
        if: env.BUILD_TARGET != 'x86_64-windows-gnu'
        uses: actions/cache@v2
        with:
          path: |-
            ~/.cache/zig
            zig-cache
            ~/AppData/Local/zig
          key:
            pr-build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-3
          restore-keys:
            pr-build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-3

      - name: Get extras.
        run: zig build get-extras -fstage1 ${{ (github.event.inputs.deps_rev_override && format('-Ddeps-rev="{0}"', github.event.inputs.deps_rev_override)) || '' }}

      # Test core does not build external libs. It's nice to surface problems with the codebase first before doing a full build.
      - name: Test core.
        if: env.BUILD_TARGET != 'aarch64-macos-none'
        run: zig build test ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }} -Dfetch

      - name: Test app.
        if: env.BUILD_TARGET != 'aarch64-macos-none' && env.BUILD_TARGET != 'x86_64-windows-gnu'
        run: zig build test-app ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # - name: Test behavior.
      #   if: env.BUILD_TARGET != 'aarch64-macos-none'
      #   run: zig build test-behavior ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # - name: Build.
      #   run: zig build cosmic ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}