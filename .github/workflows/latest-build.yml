name: Latest Build

on: 
  workflow_dispatch:
    inputs:
      deps_rev_override:
        description: 'Deps Revision Override'
        type: string
        default: ''
        required: false
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '**.md'
      - 'tools/**.js'
# Cancel previous job if it's running.
concurrency:
  group: latest
  cancel-in-progress: true
jobs:  
  build:
    name: host=${{ matrix.config.host }} target=${{ matrix.config.target }} mode=${{ matrix.config.mode }}
    runs-on: ${{ matrix.config.host }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - host: ubuntu-22.04
            target: x86_64-linux-gnu
            mode: release
          - host: macos-12
            target: x86_64-macos-none
            mode: release
          - host: macos-12
            target: aarch64-macos-none
            mode: release
          - host: windows-2022
            target: x86_64-windows-gnu
            mode: release
          # - host: windows-2019
          #  target: x86_64-windows-msvc
          #  mode: release
    env:
      BIN_ZIP: >-
        ${{ fromJson('{
          "x86_64-windows-gnu": "cosmic-windows-x64.zip",
          "x86_64-linux-gnu": "cosmic-linux-x64.zip",
          "x86_64-macos-none": "cosmic-macos-x64.zip",
          "aarch64-macos-none": "cosmic-macos-arm64.zip",
        }')[matrix.config.target] }}
      ZIG_TARGET_FLAG: >-
        ${{ fromJson('{
          "x86_64-windows-gnu": "-Dtarget=x86_64-windows-gnu -Dcpu=baseline",
          "x86_64-linux-gnu": "-Dtarget=x86_64-linux-gnu -Dcpu=baseline",
          "x86_64-macos-none": "-Dtarget=x86_64-macos.10.13-none -Dcpu=baseline",
          "aarch64-macos-none": "-Dtarget=aarch64-macos.11-none -Dcpu=baseline",
        }')[matrix.config.target] }}
      BUILD_HOST: ${{ matrix.config.host }}
      BUILD_TARGET: ${{ matrix.config.target }}
      BUILD_MODE: ${{ matrix.config.mode }}
      BIN_NAME: cosmic
      BIN_EXT: ${{ contains(matrix.config.target, 'windows') && '.exe' || '' }}
      ZIG_MODE_FLAG: ${{ (matrix.config.mode == 'release' && '-Doptimize=ReleaseSafe') || '' }}
      ZIG_VERSION: 0.11.0-dev.1797+d3c9bfada
    steps:
      - name: Install Linux deps.
        if: env.BUILD_HOST == 'ubuntu-22.04' && env.BUILD_TARGET == 'x86_64-linux-gnu'
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt-get install libx11-dev libxcursor-dev libxi-dev libxrandr-dev libxinerama-dev libxxf86vm-dev libxss-dev libgl1-mesa-dev libvulkan-dev xz-utils

      - name: Setup WSL (windows)
        if: env.BUILD_TARGET == 'x86_64-windows-gnu'
        uses: Vampire/setup-wsl@v1
        with:
          additional-packages: wget tar xz-utils zip

      - name: Clone repo.
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          #submodules: recursive

      - name: Install zig.
        if: env.BUILD_HOST == 'ubuntu-22.04'
        run: |
          wget -c https://ziglang.org/builds/zig-linux-x86_64-0.11.0-dev.1465+d64dd75e3.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin

      - name: Install zig.
        if: env.BUILD_HOST == 'macos-12'
        run: |
          wget -c https://ziglang.org/builds/zig-macos-x86_64-0.11.0-dev.1465+d64dd75e3.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin

      - name: Install zig.
        if: env.BUILD_HOST == 'windows-2022'
        run: |
          wget -c https://ziglang.org/builds/zig-windows-x86_64-0.11.0-dev.1465+d64dd75e3.zip -O - | tar -J --strip-components=1 -C /usr/local/bin

      - name: Setup script.
        uses: actions/github-script@v5
        with:
          script: |
            core.exportVariable('SHORT_SHA', context.sha.substring(0, 7))

      - name: Get version.
        if: env.BUILD_HOST == 'ubuntu-22.04' || env.BUILD_HOST == 'macos-12'
        run: |
          zig build version 2>&1 | tee version
          echo "BUILD_VERSION=$(cat version)" >> $GITHUB_ENV

      - name: Get version. (windows)
        if: env.BUILD_HOST == 'windows-2022'
        run: |
          zig build version > version 2>&1
          echo "BUILD_VERSION=$(cat version)" >> $env:GITHUB_ENV

      - name: Cache.
        # Don't cache for windows, since there are issues with subsequent builds. Check to re-enable this later.
        if: env.BUILD_TARGET != 'x86_64-windows-gnu'
        uses: actions/cache@v2
        with:
          path: |-
            ~/.cache/zig
            zig-cache
            ~/AppData/Local/zig
          key:
            build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-3
          restore-keys:
            build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-3

      - name: Get extras.
        run: zig build get-extras ${{ (github.event.inputs.deps_rev_override && format('-Ddeps-rev="{0}"', github.event.inputs.deps_rev_override)) || '' }}

      # Test core does not build external libs. It's nice to surface problems with the codebase first before doing a full build.
      - name: Test core.
        if: env.BUILD_TARGET != 'aarch64-macos-none'
        run: zig build test ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }} -Dfetch

      - name: Test app.
        if: env.BUILD_TARGET != 'aarch64-macos-none' && env.BUILD_TARGET != 'x86_64-windows-gnu'
        run: zig build test-app ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # - name: Test behavior.
      #   if: env.BUILD_TARGET != 'aarch64-macos-none'
      #   run: zig build test-behavior ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # - name: Build.
      #   run: zig build cosmic ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # # Remove when zig strip is fixed.
      # - name: Strip (Linux)
      #   if: env.BUILD_TARGET == 'x86_64-linux-gnu' && env.BUILD_MODE == 'release'
      #   run: |
      #     strip zig-out/${{ env.BUILD_TARGET }}/main/main

      # # Don't strip aarch64 since it was already code signed.
      # # TODO: Look for way to make zig strip before doing the codesign.
      # - name: Strip (macOS)
      #   if: env.BUILD_TARGET == 'x86_64-macos-none' && env.BUILD_MODE == 'release'
      #   run: |
      #     strip zig-out/${{ env.BUILD_TARGET }}/main/main

      # # Currently just ad hoc signing.
      # # aarch64 build is automatically signed by zig.
      # - name: Codesign (macOS)
      #   if: env.BUILD_TARGET == 'x86_64-macos-none' && env.BUILD_MODE == 'release'
      #   run: |
      #     codesign --force --deep -s - zig-out/${{ env.BUILD_TARGET }}/main/main

      # - name: Copy binary.
      #   run: cp
      #     zig-out/${{ env.BUILD_TARGET }}/main/main${{ env.BIN_EXT }}
      #     zig-out/${{ env.BUILD_TARGET }}/main/cosmic${{ env.BIN_EXT }}

      # - name: Zip. (linux/macos)
      #   if: env.BUILD_HOST == 'ubuntu-20.04' || env.BUILD_HOST == 'macos-11'
      #   run: |
      #     (cd zig-out/${{ env.BUILD_TARGET }}/main && zip - cosmic${{env.BIN_EXT}}) > ${{ env.BIN_ZIP }}

      # - name: Zip. (windows)
      #   if: env.BUILD_HOST == 'windows-2019'
      #   shell: wsl-bash {0}
      #   run: |
      #     (cd zig-out/${{ env.BUILD_TARGET }}/main && zip - cosmic${{env.BIN_EXT}}) > ${{ env.BIN_ZIP }}

      # - name: Save artifact.
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: bin
      #     path: |
      #       ${{ env.BIN_ZIP }}

    outputs:
      version: ${{ env.BUILD_VERSION }}
      short_sha: ${{ env.SHORT_SHA }}

  # release:
  #   needs: build
  #   name: Release
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: bin

  #     - name: Rename with version.
  #       run: |
  #         mv cosmic-windows-x64.zip cosmic-windows-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #         mv cosmic-linux-x64.zip cosmic-linux-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #         mv cosmic-macos-x64.zip cosmic-macos-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #         mv cosmic-macos-arm64.zip cosmic-macos-arm64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip

  #     - name: Github Release.
  #       uses: marvinpinto/action-automatic-releases@latest
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         automatic_release_tag: latest
  #         prerelease: false
  #         title: ${{ needs.build.outputs.version }}
  #         files: |
  #           cosmic-windows-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #           cosmic-linux-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #           cosmic-macos-x64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip
  #           cosmic-macos-arm64_${{ needs.build.outputs.version }}-${{ needs.build.outputs.short_sha }}.zip

  # dispatch:
  #   needs: release
  #   name: Dispatch doc gen.
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Dispatch doc gen workflow.
  #       continue-on-error: true
  #       uses: actions/github-script@v5
  #       with:
  #         github-token: ${{ secrets.PAT }}
  #         script: |
  #           await github.request('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', {
  #             owner: 'fubark',
  #             repo: 'cosmic-site',
  #             workflow_id: 'gen-docs.yml',
  #             // workflow should just exist in master, one of the workflow steps will then checkout gh_pages.
  #             ref: 'master'
  #           })